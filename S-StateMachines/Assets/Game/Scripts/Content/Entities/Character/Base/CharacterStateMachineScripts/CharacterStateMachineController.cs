using System;
using UnityEngine;

namespace SLibrary.StateExample
{
    /// <summary>
    /// This is an automatically generated script that is created ONCE and extends from the autogenerated code from, ScriptableStateController
    /// </summary>
    public class CharacterStateMachineController : BaseCharacterStateMachineController
    {
        public float walkSpeed = 2.0f;
        public float sprintSpeed = 4.0f;
        public float jumpHeight = 1.0f;
        public float gravityValue = -9.81f;

        private CharacterController controller;
        private Vector2 inputVector;
        private Vector3 playerVelocity;
        private bool groundedPlayer;
        private float curSpeed;

        protected override void Awake()
        {
            base.Awake();

            controller = gameObject.GetComponent<CharacterController>();

        }

        protected override void Start()
        {
            base.Start();

        }

        protected override void Update()
        {
            base.Update();
         
            ApplyMovement();
        }

        protected override void OnDrawGizmos()
        {
            base.OnDrawGizmos();
        }

        void ApplyMovement()
        {
            groundedPlayer = controller.isGrounded;
            if (groundedPlayer && playerVelocity.y < 0)
            {
                playerVelocity.y = 0f;
            }

            Vector3 move = new Vector3(inputVector.x, 0, inputVector.y);
            controller.Move(move * Time.deltaTime * curSpeed);

            if (move != Vector3.zero)
            {
                gameObject.transform.forward = move;
            }

            playerVelocity.y += gravityValue * Time.deltaTime;
            controller.Move(playerVelocity * Time.deltaTime);
        }

        internal void Teleport(Vector3 pos)
        {
            controller.enabled = false;
            transform.position = pos;
            controller.enabled = true;
        }

        public void SetSpeed(float speed)
        {
            curSpeed = speed;
        }

        public void SetInputVector()
        {
            inputVector = Vector2.zero;
            if (Input.GetKey(KeyCode.W))
                inputVector.y = 1;
            if (Input.GetKey(KeyCode.S))
                inputVector.y = -1;
            if (Input.GetKey(KeyCode.D))
                inputVector.x = 1;
            if (Input.GetKey(KeyCode.A))
                inputVector.x = -1;
        }

        public void Jump()
        {
            playerVelocity.y += Mathf.Sqrt(jumpHeight * -3.0f * gravityValue);
        }

        public bool IsGrounded()
        {
            return groundedPlayer;
        }
    }
}